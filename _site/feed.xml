<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/yylsp/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/yylsp/" rel="alternate" type="text/html" /><updated>2023-10-01T17:03:30+08:00</updated><id>http://localhost:4000/yylsp/feed.xml</id><title type="html">Jekyll Actions Demo</title><entry><title type="html">Ho</title><link href="http://localhost:4000/yylsp/2023/09/30/ho.html" rel="alternate" type="text/html" title="Ho" /><published>2023-09-30T00:00:00+08:00</published><updated>2023-09-30T00:00:00+08:00</updated><id>http://localhost:4000/yylsp/2023/09/30/ho</id><content type="html" xml:base="http://localhost:4000/yylsp/2023/09/30/ho.html"><![CDATA[<p>An apple is a sweet, edible fruit produced by an apple tree.</p>

<p>Apple tredhdiowejiodwoqejdioqewjoidweqoidjoi爹哦就哦第九期我IE京东i降温哦滴起哦我i额都去我家饿哦ID几千万饿哦代金券哦文件都i阿胶都i就去问哦的钱哦i文件的哦我就饿都i请加微哦的剧情我ID叫哦i去我家鹅都去我家饿哦滴进去我IE大家oeij</p>]]></content><author><name>ho</name></author><summary type="html"><![CDATA[An apple is a sweet, edible fruit produced by an apple tree.]]></summary></entry><entry><title type="html">Bananas</title><link href="http://localhost:4000/yylsp/2019/08/20/bananas.html" rel="alternate" type="text/html" title="Bananas" /><published>2019-08-20T00:00:00+08:00</published><updated>2019-08-20T00:00:00+08:00</updated><id>http://localhost:4000/yylsp/2019/08/20/bananas</id><content type="html" xml:base="http://localhost:4000/yylsp/2019/08/20/bananas.html"><![CDATA[<p>A banana is an edible fruit – botanically a berry – produced by several
kinds of large herbaceous flowering plants in the genus Musa.</p>

<p>In some countries, bananas used for cooking may be called “plantains”,
distinguishing them from dessert bananas. The fruit is variable in size,
color, and firmness, but is usually elongated and curved, with soft
flesh rich in starch covered with a rind, which may be green, yellow,
red, purple, or brown when ripe.</p>]]></content><author><name>jill</name></author><summary type="html"><![CDATA[A banana is an edible fruit – botanically a berry – produced by several kinds of large herbaceous flowering plants in the genus Musa.]]></summary></entry><entry><title type="html">Kiwifruit</title><link href="http://localhost:4000/yylsp/2018/08/22/kiwifruit.html" rel="alternate" type="text/html" title="Kiwifruit" /><published>2018-08-22T00:00:00+08:00</published><updated>2018-08-22T00:00:00+08:00</updated><id>http://localhost:4000/yylsp/2018/08/22/kiwifruit</id><content type="html" xml:base="http://localhost:4000/yylsp/2018/08/22/kiwifruit.html"><![CDATA[<p>Kiwifruit (often abbreviated as kiwi), or Chinese gooseberry is the
edible berry of several species of woody vines in the genus Actinidia.</p>

<p>The most common cultivar group of kiwifruit is oval, about the size of
a large hen’s egg (5–8 cm (2.0–3.1 in) in length and 4.5–5.5 cm
(1.8–2.2 in) in diameter). It has a fibrous, dull greenish-brown skin
and bright green or golden flesh with rows of tiny, black, edible
seeds. The fruit has a soft texture, with a sweet and unique flavor.</p>]]></content><author><name>ted</name></author><summary type="html"><![CDATA[Kiwifruit (often abbreviated as kiwi), or Chinese gooseberry is the edible berry of several species of woody vines in the genus Actinidia.]]></summary></entry><entry><title type="html">Apples</title><link href="http://localhost:4000/yylsp/2018/08/21/apples.html" rel="alternate" type="text/html" title="Apples" /><published>2018-08-21T00:00:00+08:00</published><updated>2018-08-21T00:00:00+08:00</updated><id>http://localhost:4000/yylsp/2018/08/21/apples</id><content type="html" xml:base="http://localhost:4000/yylsp/2018/08/21/apples.html"><![CDATA[<p>An apple is a sweet, edible fruit produced by an apple tree.</p>

<p>Apple trees are cultivated worldwide, and are the most widely grown
species in the genus Malus. The tree originated in Central Asia, where
its wild ancestor, Malus sieversii, is still found today. Apples have
been grown for thousands of years in Asia and Europe, and were brought
to North America by European colonists.</p>]]></content><author><name>jill</name></author><summary type="html"><![CDATA[An apple is a sweet, edible fruit produced by an apple tree.]]></summary></entry><entry><title type="html">Snyk - Automatically Scan and Fix Ruby and Nodejs Vulnerabilities</title><link href="http://localhost:4000/yylsp/2016/11/10/snyk.html" rel="alternate" type="text/html" title="Snyk - Automatically Scan and Fix Ruby and Nodejs Vulnerabilities" /><published>2016-11-10T00:00:00+08:00</published><updated>2016-11-10T00:00:00+08:00</updated><id>http://localhost:4000/yylsp/2016/11/10/snyk</id><content type="html" xml:base="http://localhost:4000/yylsp/2016/11/10/snyk.html"><![CDATA[<h1 id="snyk---automatically-scan-and-fix-ruby-and-nodejs-vulnerabilities">Snyk - Automatically Scan and Fix Ruby and Nodejs Vulnerabilities</h1>

<p class="meta">10 Nov 2016 - San Francisco</p>

<p>This is a story about a company called
<a href="https://snyk.io/blog/welcome-ruby-users/">Snyk</a> (pronounced “sneak”), their
founder Guy Podjarny, my decision to become one of their advisors, and how they
are going to help save you from malevolent agents trying to steal your digital
stuff.</p>

<p>If you’re anything like me, you’re simultaneously terrified and in awe of the
increasing commonality of large corporate security breaches. Even big names like
Ebay, Home Depot, Anthem, JP Morgan Chase, Target, LinkedIn, Dropbox, and Yahoo
are falling victim to sophisticated attacks. If you spend even a few minutes
looking into it, you’ll be shocked at how frequently these breaches are
happening now. The fine folks at Information is Beautiful have an excellent
interactive visualization of the <a href="http://www.informationisbeautiful.net/visualizations/worlds-biggest-data-breaches-hacks/">World’s Biggest Data
Breaches</a>
over the last twelve years, in case you want to read all the gory details and
never get a restful night of sleep ever again:</p>

<p><a href="http://www.informationisbeautiful.net/visualizations/worlds-biggest-data-breaches-hacks/">
  <img src="/images/posts/2016-11-10/breaches.png" />
</a></p>

<p>I’ve used a fair number of emotionally charged words above that might be
triggering your FUD detectors right about now. But be advised: it’s not paranoia
when they really are out to get you. If recent, extremely high profile (and
subsequently weaponized) breaches like those of the Clinton Campaign and the DNC
aren’t enough to make you want to air gap your entire life, then I envy your
steely-eyed mettle and implore you to teach me your meditation techniques.</p>

<p>The fact is, security is hard. And it’s getting harder every day. To win, you
have to get it right every single time. To lose (and lose big), you only have to
screw it up once.</p>

<p>During my years at GitHub, I spent a lot of time assembling a dedicated security
team, managing security audits and penetration tests, and working to establish a
culture of security awareness amongst our development team. All of this is
challenging and expensive, especially for a young company. Even worse, it’s the
kind of investment that’s totally invisible when it’s working, making it hard to
sustain until that crucial and terrible moment you end up on the front page of
Hacker News as the latest victim.</p>

<p>A year ago I was contemplating this, especially the difficult proposition of
having developers, furious at work on new features, constantly maintain
awareness of security vulnerabilities they might be inadvertently weaving into
the product. Web application developers are generally not security experts, and
though I would love to live in a world where that wasn’t true, it’s just not a
realistic expectation. Meanwhile, modern development means an increasing
reliance on 3rd party code. Even a small Rails app will probably have 300 or
more gem dependencies after a few months of development. It’s even more in the
nodejs world. This level of modularization and code reuse, driven by the
explosion of high quality open source over the last decade, is amazing and I
absolutely love it, but it comes at a security expense.</p>

<p>Open source projects are not known for their excellent security records.
Vulnerabilities like <a href="http://heartbleed.com/">Heartbleed</a> and
<a href="https://blog.cloudflare.com/inside-shellshock/">Shellshock</a> painfully
demonstrate the idea that “given enough eyeballs, all bugs are shallow” is
completely false. In fact, due to a flaw in YAML, Rails had a <a href="http://blog.codeclimate.com/blog/2013/01/10/rails-remote-code-execution-vulnerability-explained/">pretty extreme
remote code execution
vulnerability</a>
for years. If you were running any version of Rails prior to the fix, you were
vulnerable. This stuff is real, and as responsible developers, we need to be
more proactive about it.</p>

<p>Luckily, at the time I was pondering these matters, I ran into Guy Podjarny. As
a former cofounder of Blaze.io and then CTO of Web Experience at Akamai (which
acquired Blaze.io), Guy intimately understands the impact of security on today’s
web developers. He was working on an automated tool to scan and fix security
vulnerabilities in 3rd party dependencies. I was intrigued. They already had a
way to scan nodejs projects and look for known security vulnerabilities in the
dependency tree and automatically upgrade or patch affected libraries. I thought
this was pretty cool, but it was his vision for what automated security tooling
could be that sold me on him and his company. I can’t talk much about that
now, but just know that what Snyk is today is just the tip of what will
become an intelligent and proactive bodyguard for your entire codebase.</p>

<p>A few months ago, Snyk released GitHub integration to make it fantastically
simple to hook up your repos to Snyk and, my favorite feature: the ability to
monitor your repo for future vulnerabilities and then <strong>automatically submit a
pull request</strong> with the suggested package upgrade or hotfix patch (nodejs only for
now).</p>

<p>Today, <a href="https://snyk.io/blog/welcome-ruby-users/">Snyk announced support for
Ruby</a>. Take a look at that blog post,
it does an awesome job of explaining how simple it is to set up and what the
generated pull requests look like. It’s totally free for open source projects,
and extremely cheap insurance for your important projects.</p>

<p>Make no mistake, 3rd party code is a clear and present danger to your business.
If you don’t know if you’re vulnerable, then you must assume that you are and
take steps to protect yourself. Snyk makes it easy.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Snyk - Automatically Scan and Fix Ruby and Nodejs Vulnerabilities]]></summary></entry><entry><title type="html">Replicated - An Easier Path from SaaS to Enterprise</title><link href="http://localhost:4000/yylsp/2015/06/19/replicated.html" rel="alternate" type="text/html" title="Replicated - An Easier Path from SaaS to Enterprise" /><published>2015-06-19T00:00:00+08:00</published><updated>2015-06-19T00:00:00+08:00</updated><id>http://localhost:4000/yylsp/2015/06/19/replicated</id><content type="html" xml:base="http://localhost:4000/yylsp/2015/06/19/replicated.html"><![CDATA[<h1 id="replicated---an-easier-path-from-saas-to-enterprise">Replicated - An Easier Path from SaaS to Enterprise</h1>

<p class="meta">19 Jun 2015 - San Francisco</p>

<p>Over the last year I’ve had a chance to learn a lot more about early stage
funding and made angel investments in a handful of startups. So far I’ve
restricted my involvement to companies with ideas in which I have significant
domain knowledge. I also insist on founders with relentless product focus, a
fierce desire to help their customers be more awesome, and excellent
communication skills. I recently met just such a company, with just such
founders, tackling a problem that has personally caused me much pain.</p>

<p>The company is <a href="http://replicated.com">Replicated</a>, and founders Grant Miller
and Marc Campbell are making it easier to roll out an on-prem Enterprise
offering based on an existing cloud-based SaaS product.</p>

<p>At GitHub, we burned through <strong>a lot</strong> of developer cycles building our own
installer (several times), securing the installation environment, coding an
automated licensing management system, integrating single sign-on services
(LDAP, Active Directory, CAS, etc, etc), building out a searchable audit system,
supporting customer-reviewable support bundles (logs and other diagnostic
output), allowing numerous backup strategies, and countless other
Enterprise-specific features that were killing our Enterprise deals. All of this
on top of hiring and building out the necessary sales, support, and accounting
teams to create a smooth Enterprise experience for our customers.</p>

<p>Replicated provides common Enterprise functionality (much of what I mentioned
above, and all of it eventually) that you can wrap around your SaaS product,
resulting in a first-class on-prem product in a fraction of the time. Beyond
just technology, Replicated will help you understand your Enterprise customers
through documentation on best practices and insight into the requirements and
reasons that large companies desire the features they do. Until you can
empathise with your customer (which is very hard to do as a fast-moving SaaS
startup), you’ll never build the best product possible.</p>

<p>Getting into the Enterprise market will always be hard. But by reducing the
technology burden, Replicated plans to erase much of the pain so you can focus
on the other human-centric tasks. Not only am I an investor in Replicated, I
believe in their mission and their founders so much that I’ve joined as an
advisor. I understand what the uphill slog of the SaaS to Enterprise climb feels
like, and I’m going to do my best to ensure you don’t have to suffer it as much
as I did.</p>

<p>I’m also pleased to announce that Travis CI is now shipping their Enterprise
product using Replicated. To see what the installation process is like, <a href="https://www.youtube.com/watch?v=ViN-qkcovL0&amp;feature=youtu.be">watch
Grant install Travis CI
Enterprise</a> on a
fresh server in about seven minutes. For a deeper dive, Travis CI has also
published a blog post covering some of their process in <a href="http://blog.travis-ci.com/2015-06-19-how-we-improved-travis-ci-installation/">getting their
Enterprise installer ready using
Replicated</a>.</p>

<p>In the coming weeks, you’ll start to see other well-known startups launching (or
re-launching) Enterprise versions of their SaaS software on top of Replicated.
If you’re looking to do the same, and want to save yourself a lot of heartache,
email <a href="mailto:contact@replicated.com">contact@replicated.com</a>, and start
focusing on what matters the most: your unique and kickass product.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Replicated - An Easier Path from SaaS to Enterprise]]></summary></entry><entry><title type="html">Farewell GitHub, Hello Immersive Computing</title><link href="http://localhost:4000/yylsp/2014/04/21/farewell-github-hello-immersive-computing.html" rel="alternate" type="text/html" title="Farewell GitHub, Hello Immersive Computing" /><published>2014-04-21T00:00:00+08:00</published><updated>2014-04-21T00:00:00+08:00</updated><id>http://localhost:4000/yylsp/2014/04/21/farewell-github-hello-immersive-computing</id><content type="html" xml:base="http://localhost:4000/yylsp/2014/04/21/farewell-github-hello-immersive-computing.html"><![CDATA[<h1 id="farewell-github-hello-immersive-computing">Farewell GitHub, Hello Immersive Computing</h1>

<p class="meta">21 Apr 2014 - New York City</p>

<p>Today is my last day at GitHub. Recent events have given me a lot of time to
reflect on what’s important to me, and I’ve decided to switch gears and focus on
building something from scratch again. Since visiting the Oculus VR team at
their office three months ago, I’ve come to believe that immersive computing
(aka virtual reality) is poised to rival the personal computer, the web, social
networking, and mobile devices in its impact. While the timing is more abrupt
than I had intended, with everything that’s happened, I think now is the right
time to do this, and I’d like to explain why.</p>

<p>First, I want to address the serious accusations that were made against me and
my family over the past month. With every decision I made at GitHub and in every
interaction I had with employees, I tried to treat people better than they
expected and to resolve conflict with empathy. Despite that, I’ve made mistakes,
and I am deeply sorry to anyone who was hurt by those mistakes. It devastates me
to know that I missed the mark, and I will strive to do better, every day.</p>

<p>That said, I want to be very clear about one thing: neither my wife, Theresa,
nor I have ever engaged in gender-based harassment or discrimination. The
results of GitHub’s independent investigation unequivocally confirm this and we
are prepared to fight any further false claims on this matter to the full extent
of the law. I believe in diversity and equality for all people in all
professions, especially the tech sector. It’s immensely important to me and I
will continue to do my very best to further that belief.</p>

<p>Unfortunately, the investigation and all the attention surrounding it have me
concerned that remaining at GitHub would be a distraction for both me and the
company. I’m incredibly proud of what I’ve helped build at GitHub and I don’t
want the events of the past month to jeopardize that. I care too much about the
company and the people here to let that happen. The GitHub team is incredibly
strong, with fierce vision, and I have no doubt they will continue to
revolutionize software development for decades to come. Founding and building
GitHub has been the greatest adventure of my life. I’ve been so lucky to be on
this journey with such amazing, helpful, talented, and real people. I’m going to
miss working with such a great team, but I’m also insanely excited about the
future.</p>

<p>Since the early days of GitHub, I’ve wanted to create a different kind of
business. One that was <a href="http://tom.preston-werner.com/2010/10/18/optimize-for-happiness.html">Optimized for
Happiness</a>
and built atop a <a href="https://www.youtube.com/watch?v=i0FzgvYxdvk">Framework of
Happiness</a>. One where great people
could work on hard problems together to create unbelievably good products. I
believe I was able to achieve a great deal of success with that model at GitHub,
even if things didn’t always go perfectly according to plan. All of this has
been a tremendous learning experience for me.</p>

<p>Last January I stepped down as CEO and handed that role over to cofounder Chris
Wanstrath so I could focus on future-facing R&amp;D projects with small teams. This
kind of rapid, team-based innovation is what I live for. During my time away
from GitHub I started experimenting with Go, OpenGL, and Unity with an eye
towards the software side of immersive computing. It felt really good to get
back into a code editor and challenge the deeply logical and analytical part of
my brain. I’ve enjoyed the challenges of learning how to lead a company with
hundreds of people, but it’s very hard for me to deny the allure of coding a
system that could once again change the course of history.</p>

<p>I’m telling you this because I think stealth mode is bullshit and if you feel
the same way I do about immersive computing then I want to talk with you about
it. For the next few months I’m going to be living in Manhattan. My wife,
Theresa, is currently participating in Techstars NYC as their very first
nonprofit. Her startup, <a href="https://omakasecharity.org/">The Omakase Charity</a>,
helps donors learn about and support nonprofits that are changing the world with
technology. She’s one of the strongest and most thoughtful women I know, and I’m
hoping to help her succeed with her mission while I’m here.</p>

<p>Thank you to everyone that reached out to me over the last month, including the
generous team at Andreessen Horowitz. Your support has made a huge difference
and I’m truly excited for what’s next.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Farewell GitHub, Hello Immersive Computing]]></summary></entry><entry><title type="html">Open Source (Almost) Everything</title><link href="http://localhost:4000/yylsp/2011/11/22/open-source-everything.html" rel="alternate" type="text/html" title="Open Source (Almost) Everything" /><published>2011-11-22T00:00:00+08:00</published><updated>2011-11-22T00:00:00+08:00</updated><id>http://localhost:4000/yylsp/2011/11/22/open-source-everything</id><content type="html" xml:base="http://localhost:4000/yylsp/2011/11/22/open-source-everything.html"><![CDATA[<h1 id="open-source-almost-everything">Open Source (Almost) Everything</h1>

<p class="meta">22 Nov 2011 - San Francisco</p>

<p>When Chris and I first started working on GitHub in late 2007, we split the work into two parts. Chris worked on the Rails app and I worked on Grit, the first ever Git bindings for Ruby. After six months of development, Grit had become complete enough to power GitHub during our public launch of the site and we were faced with an interesting question:</p>

<p>Should we open source Grit or keep it proprietary?</p>

<p>Keeping it private would provide a higher hurdle for competing Ruby-based Git hosting sites, giving us an advantage. Open sourcing it would mean thousands of people worldwide could use it to build interesting Git tools, creating an even more vibrant Git ecosystem.</p>

<p>After a small amount of debate we decided to open source Grit. I don’t recall the specifics of the conversation but that decision nearly four years ago has led to what I think is one of our most important core values: open source (almost) everything.</p>

<h2 id="why-is-it-awesome-to-open-source-almost-everything">Why is it awesome to open source (almost) everything?</h2>

<p>If you do it right, open sourcing code is <strong>great advertising</strong> for you and your company. At GitHub we like to talk publicly about libraries and systems we’ve written that are still closed but destined to become open source. This technique has several advantages. It helps determine what to open source and how much care we should put into a launch. We recently open sourced Hubot, our chat bot, to widespread delight. Within two days it had 500 watchers on GitHub and 409 upvotes on Hacker News. This translates into goodwill for GitHub and more superfans than ever before.</p>

<p>If your code is popular enough to attract outside contributions, you will have created a <strong>force multiplier</strong> that helps you get more work done faster and cheaper. More users means more use cases being explored which means more robust code. Our very own <a href="https://github.com/defunkt/resque">resque</a> has been improved by 115 different individuals outside the company, with hundreds more providing 3rd-party plugins that extend resque’s functionality. Every bug fix and feature that you merge is time saved and customer frustration avoided.</p>

<p>Smart people like to hang out with other smart people. Smart developers like to hang out with smart code. When you open source useful code, you <strong>attract talent</strong>. Every time a talented developer cracks open the code to one of your projects, you win. I’ve had many great conversations at tech conferences about my open source code. Some of these encounters have led to ideas that directly resulted in better solutions to problems I was having with my projects. In an industry with such a huge range of creativity and productivity between developers, the right eyeballs on your code can make a big difference.</p>

<p>If you’re hiring, <strong>the best technical interview possible</strong> is the one you don’t have to do because the candidate is already kicking ass on one of your open source projects. Once technical excellence has been established in this way, all that remains is to verify cultural fit and convince that person to come work for you. If they’re passionate about the open source code they’ve been writing, and you’re the kind of company that cares about well-crafted code (which clearly you are), that should be simple! We hired <a href="https://github.com/tanoku">Vicent Martí</a> after we saw him doing stellar work on <a href="https://github.com/libgit2/libgit2">libgit2</a>, a project we’re spearheading at GitHub to extract core Git functionality into a standalone C library. No technical interview was necessary, Vicent had already proven his skills via open source.</p>

<p>Once you’ve hired all those great people through their contributions, dedication to open source code is an amazingly effective way to <strong>retain that talent</strong>. Let’s face it, great developers can take their pick of jobs right now. These same developers know the value of coding in the open and will want to build up a portfolio of projects they can show off to their friends and potential future employers. That’s right, a paradox! In order to keep a killer developer happy, you have to help them become more attractive to other employers. But that’s ok, because that’s exactly the kind of developer you want to have working for you. So relax and let them work on open source or they’ll go somewhere else where they can.</p>

<p>When I start a new project, I assume it will eventually be open sourced (even if it’s unlikely). This mindset leads to <strong>effortless modularization</strong>. If you think about how other people outside your company might use your code, you become much less likely to bake in proprietary configuration details or tightly coupled interfaces. This, in turn, leads to cleaner, more maintainable code. Even internal code should pretend to be open source code.</p>

<p>Have you ever written an amazing library or tool at one job and then left to join another company only to rewrite that code or remain miserable in its absence? I have, and it sucks. By getting code out in the public we can drastically <strong>reduce duplication of effort</strong>. Less duplication means more work towards things that matter.</p>

<p>Lastly, <strong>it’s the right thing to do</strong>. It’s almost impossible to do anything these days without directly or indirectly executing huge amounts of open source code. If you use the internet, you’re using open source. That code represents millions of man-hours of time that has been spent and then given away so that everyone may benefit. We all enjoy the benefits of open source software, and I believe we are all morally obligated to give back to that community. If software is an ocean, then open source is the rising tide that raises all ships.</p>

<h2 id="ok-then-what-shouldnt-i-open-source">Ok, then what shouldn’t I open source?</h2>

<p>That’s easy. Don’t open source anything that represents core business value.</p>

<p>Here are some examples of what we don’t open source and why:</p>

<ul>
  <li>Core GitHub Rails app (easier to sell when closed)</li>
  <li>The Jobs Sinatra app (specially crafted integration with github.com)</li>
</ul>

<p>Here are some examples of things we do open source and why:</p>

<ul>
  <li>Grit (general purpose Git bindings, useful for building many tools)</li>
  <li>Ernie (general purpose BERT-RPC server)</li>
  <li>Resque (general purpose job processing)</li>
  <li>Jekyll (general purpose static site generator)</li>
  <li>Gollum (general purpose wiki app)</li>
  <li>Hubot (general purpose chat bot)</li>
  <li>Charlock_Holmes (general purpose character encoding detection)</li>
  <li>Albino (general purpose syntax highlighting)</li>
  <li>Linguist (general purpose filetype detection)</li>
</ul>

<p>Notice that everything we keep closed has specific business value that could be compromised by giving it away to our competitors. Everything we open is a general purpose tool that can be used by all kinds of people and companies to build all kinds of things.</p>

<h2 id="what-is-the-one-true-license">What is the One True License?</h2>

<p>I prefer the MIT license and almost everything we open source at GitHub carries this license. I love this license for several reasons:</p>

<ul>
  <li>
    <p>It’s short. Anyone can read this license and understand exactly what it means without wasting a bunch of money consulting high-octane lawyers.</p>
  </li>
  <li>
    <p>Enough protection is offered to be relatively sure you won’t sue me if something goes wrong when you use my code.</p>
  </li>
  <li>
    <p>Everyone understands the legal implications of the MIT license. Weird licenses like the WTFPL and the Beer license pretend to be the “ultimate in free licenses” but utterly fail at this goal. These fringe licenses are too vague and unenforceable to be acceptable for use in some companies. On the other side, the GPL is too restrictive and dogmatic to be usable in many cases. I want everyone to benefit from my code. Everyone. That’s what Open should mean, and that’s what Free should mean.</p>
  </li>
</ul>

<h2 id="rad-how-do-i-get-started">Rad, how do I get started?</h2>

<p>Easy, just flip that switch on your GitHub repository from private to public and tell the world about your software via your blog, Twitter, Hacker News, and over beers at your local pub. Then sit back, relax, and enjoy being part of something big.</p>

<p><a href="http://news.ycombinator.com/item?id=3267432">Discuss this post on Hacker News</a></p>]]></content><author><name></name></author><summary type="html"><![CDATA[Open Source (Almost) Everything]]></summary></entry><entry><title type="html">Rejected Bio from The Setup</title><link href="http://localhost:4000/yylsp/2011/05/03/rejected-bio-from-the-setup.html" rel="alternate" type="text/html" title="Rejected Bio from The Setup" /><published>2011-05-03T00:00:00+08:00</published><updated>2011-05-03T00:00:00+08:00</updated><id>http://localhost:4000/yylsp/2011/05/03/rejected-bio-from-the-setup</id><content type="html" xml:base="http://localhost:4000/yylsp/2011/05/03/rejected-bio-from-the-setup.html"><![CDATA[<h1 id="rejected-bio-from-the-setup">Rejected Bio from The Setup</h1>

<p class="meta">03 May 2011 - San Francisco</p>

<p>Yesterday, <a href="http://tom.preston-werner.usesthis.com/">the autobiographical post I wrote for The
Setup</a> went live. I wrote that post
over a year ago and then entered into an epic battle with
<a href="http://twitter.com/#!/waferbaby">@waferbaby</a> about the length of my “Who are
you, and what do you do?” section. He said it was too long. I said it could
not be shortened. And so the post sat for a year, collecting dust, neither of
us prepared to back down.</p>

<p>About a month ago I decided that it was foolish to let the words I had written rot on my hard drive and so I did the only thing I knew how to do: overreact. So I cut the original nine-hundred words of my bio down to fourteen words and resubmitted it to Daniel. Those are the words you see in the post now.</p>

<p>For your pleasure, here is the original bio in its full, unabridged glory.</p>

<hr />

<p>My name is Tom Preston-Werner. I find that the hyphenated last name
makes me sound distinguished and worth listening to. I grew up three
decades ago in a small city in Iowa along the Mississippi, which means
I shucked a lot of corn and know exactly how many mosquitos will land
on your arm should you hold it still for ten minutes at dusk on the
muggiest day of the summer. As an aspiring theoretical particle
physicist, I worked my way through entire shelves of scientific
literature from the public library, desperately wanting to understand
the bewildering mathematics that littered the pages like so many
leaves on the bottom of that morning’s cup of green tea. I searched in
vain for instructors or classmates that could provide me with the
insight necessary to comprehend the true meaning of Heisenberg’s
Uncertainty Principle, but all I found were underpaid math teachers
and disillusioned “students” in search of their next smoke break.
After obsessing over US News’ Best Colleges reports for months I
finally chose and was accepted to Harvey Mudd, a tiny engineering
school in California famous for assigning the greatest number of hours
of homework per night. This sounded just perfect to me. Finally a
place I could bring up the EPR Paradox and not be immediately
stigmatized as “that science weirdo with the hilariously thick glasses
and unfortunate hairdo.”</p>

<p>Mudd did not disappoint. But now I had the opposite problem. In order
to properly understand particle physics, you must have a deep and
profound love of math. You have to be so comfortable with abstract
concepts that even Picasso would be jealous. Ironically, in order to
grasp the fundamental reality of our universe, you must forget about
the “reality” of everyday life and start living in a world comprised
of eigenvectors, Hilbert spaces, and Planck’s constant. This was a
leap I could not make. I like math, but I’m too easily distracted by
macroscopic reality to make it my profession.</p>

<p>Once I accepted that I would never spend late nights poring over
bubble chamber printouts at Fermilab, it became obvious that I was
destined to enter computer science. I started programming in BASIC on
a TRS-80 that my dad bought from Radio Shack when I was 8 years old.
Since then, I’d learned to love the discipline and creativity involved
in making a machine do my bidding. It was like having a super-obedient
but annoyingly logical little brother. He’ll do anything you want as
long as you tell him in precise and unambiguous language. The best
thing is, the feedback is immediate. In physics, it can take twenty
years to prove that a single esoteric particle even exists. When
you’re writing a program that displays the number of electrons in each
of the shells around the nucleus of every element, the feedback is
immediate and intoxicating. With just a few keystrokes, the world is
changed forever. Try to get that kind of rush even once in a lifetime
as a theoretical particle physicist. I dare you.</p>

<p>In 1999, after two years of college, I dropped out of Harvey Mudd to
join a startup with some friends that were graduating. It was the end
of the first dot-com bubble and I thought I could strike it rich,
right then and there. Sadly, like so many startups of the day, we
never accomplished what we envisioned and I ended up bouncing between
jobs and consulting gigs for six years until I found myself in San
Francisco. If Harvey Mudd was my mecca for physicists, then San
Francisco was my mecca for programmers. Where else can you be grabbing
lunch at a taqueria and overhear a group at the next table discussing
the finer points of optimizing C code to run on an embedded processor?</p>

<p>I moved to San Francisco to take a job as a Ruby developer with a
Wikipedia search engine called Powerset. I also began attending Ruby
meetups and drinking with local software developers. There are a lot
of talented people in the Bay Area and I wanted to meet them all.
Within the Ruby community, a distributed version control system called
Git was starting to get some attention. It was a really cool way of
working with other people on code, but there wasn’t an easy way to get
up and running with a group of developers. Along with cofounders Chris
Wanstrath and PJ Hyett (who I met at the Ruby meetups) I started a
company called GitHub that would address this problem and make it dead
simple to share Git repositories and collaborate on code with other
developers.</p>

<p>At first, we worked on GitHub on the side, putting in time on evenings
and weekends. After six months we launched the site to the public and
started charging. Not long after that, Powerset was acquired by
Microsoft and I was faced with a choice: stay on as a Microsoft
employee with a big retention bonus and give up GitHub or turn down
the Microsoft money and quit Powerset to work on GitHub full-time. You
can read more about this saga in my blog post entitled <a href="http://tom.preston-werner.com/2008/10/18/how-i-turned-down-300k.html">How I Turned
Down $300,000 from Microsoft to go Full-Time on
GitHub</a>.
I think I made the right decision.</p>

<p>Today GitHub has twenty-nine employees and more than 730,000 users with over
2,000,000 repositories. We’re growing fast, and I’m having the time of
my life!</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Rejected Bio from The Setup]]></summary></entry><entry><title type="html">Ten Lessons from GitHub’s First Year</title><link href="http://localhost:4000/yylsp/2011/03/29/ten-lessons-from-githubs-first-year.html" rel="alternate" type="text/html" title="Ten Lessons from GitHub’s First Year" /><published>2011-03-29T00:00:00+08:00</published><updated>2011-03-29T00:00:00+08:00</updated><id>http://localhost:4000/yylsp/2011/03/29/ten-lessons-from-githubs-first-year</id><content type="html" xml:base="http://localhost:4000/yylsp/2011/03/29/ten-lessons-from-githubs-first-year.html"><![CDATA[<h1 id="ten-lessons-from-githubs-first-year">Ten Lessons from GitHub’s First Year</h1>

<p class="meta">29 Mar 2011 / 29 Dec 2008 - San Francisco</p>

<p><strong>NOTE: This post was written in late December of 2008, more than two years
ago. It has stayed in my drafts folder since then, waiting for the last 2% to be
written. Why I never published it is beyond my reckoning, but it serves as a
great reminder of how I perceived the world back then. In the time since I wrote
this we’ve grown from four people to twenty-six, settled into an office,
installed a kegerator, and still never taken outside funding. In some ways,
things have changed a great deal, but in the most important ways, things are
still exactly the same. Realizing this puts a big smile on my face.</strong></p>

<p>The end of the year is a great time to sit down with a glass of your favorite
beverage, dim the lights, snuggle up next to the fire and think about what
you’ve learned over the past twelve months.</p>

<p>For me, 2008 was the year that I helped design, develop, and launch GitHub.
Creating a new startup is an intense learning experience. Through screwups and
triumphs, I have learned some valuable lessons this year. Here’s a few of them.</p>

<h2 id="start-early">Start Early</h2>

<p>When Chris and I started working on GitHub in late 2007, Git was largely unknown
as a version control system. Sure, Linux kernel hackers had been using it since
day one, but outside of that small microcosm, it was rare to come across a
developer that was using it on a day-to-day basis. I was first introduced to Git
by Dave Fayram, a good friend and former coworker during my days at Powerset.
Dave is the quintessential early adopter and, as far as I can calculate, patient
zero for the spread of Git adoption in the Ruby community and beyond.</p>

<p>Back then, the Git landscape was pretty barren. Git had only recently become
usable by normal people with the 1.5 release. As for Git hosting, there was
really only <a href="http://repo.or.cz/">repo.or.cz</a>, which felt to me very limited,
clumsy, and poorly designed. There were no commercial Git hosting options
whatsoever. Despite this, people were starting to talk about Git at the Ruby
meetups. About how awesome it was. But something was amiss. Git was supposed to
be this amazing way to work on code in a distributed way, but what was the
mechanism to securely share private code? Your only option was to setup user
accounts on Unix machines and use that as an ad-hoc solution. Not ideal.</p>

<p>And so GitHub was born. But it was born into a world where there was no existing
market for paid Git hosting. We would be <em>creating</em> the market. I vividly
remember telling people, “I don’t expect GitHub to succeed right away. Git
adoption will take a while, but we’ll be ready when it happens.” Neither Chris
nor I were in any particular hurry for this to happen. I was working full time
at Powerset, and he was making good money as a Rails consultant. By choosing to
build early on top of a nascent technology, we were able to construct a startup
with basically no overhead, no competition, and in our free time.</p>

<h2 id="adapt-to-your-customers">Adapt to Your Customers</h2>

<p>Here’s a seemingly paradoxical piece of advice for you: Listen to your
customers, but don’t let them tell you what to do. Let me explain. Consider a
feature request such as “GitHub should let me FTP up a documentation site for my
project.” What this customer is really trying to say is “I want a simple way to
publish content related to my project,” but they’re used to what’s already out
there, and so they pose the request in terms that are familiar to them. We could
have implemented some horrible FTP based solution as requested, but we looked
deeper into the underlying question and now we allow you to publish content by
simply pushing a Git repository to your account. This meets requirements of both
functionality <em>and</em> elegance.</p>

<p>Another company that understands this concept at a fundamental level is Apple.
I’m sure plenty of people asked Apple to make a phone but Steve Jobs and his
posse looked beneath the request and figured out what people really wanted: a
nice looking, simple to use, and easy to sync mobile device that kicked some
serious ass. And that’s the secret. Don’t give your customers what they ask for;
give them what they <em>want</em>.</p>

<h2 id="have-fun">Have Fun</h2>

<p>I went to college at a little school in California called Harvey Mudd. Yeah, I
know you haven’t heard of it, but if you remember those US News &amp; World Report
“Best Colleges” books that you obsessed over in highschool (ok, maybe you
didn’t, but I did), Harvey Mudd was generally ranked as the engineering school
with the greatest number of hours of homework per night. Yes, more than MIT, and
yes, more than Caltech. It turned out to be true, as far as I can tell. I have
fond memories of freaking out about ridiculously complex spring/mass/damper
systems and figuring the magnetic flux of a wire wrapped around a cylinder in a
double helix. We studied hard–very hard. But we played hard too. It was the
only thing that could possibly keep us sane.</p>

<p>Working on a startup is like that. It feels a bit like college. You’re working
on insanely hard projects, but you’re doing it with your best friends in the
world and you’re having a great time (usually). In both environments, you have
to goof off a lot in order to balance things out. Burnout is a real and
dangerous phenomenon. Fostering a playful and creative environment is critical
to maintaining both your personal health, and the health (and idea output) of
the company.</p>

<h2 id="pay-attention-to-twitter">Pay attention to Twitter</h2>

<p>I’ve found Twitter to be an extremely valuable resource for instant feedback. If
the site is slow for some reason, Twitter will tell me so. If the site is
unreachable for people in a certain country (I’m looking at you China), I’ll
find out via Twitter. If that new feature we just released is really awesome,
I’ll get a nice ego boost by scanning the Twitter search.</p>

<p>People have a tendency to turn to Twitter to bitch about all the little bugs
they see on your website, usually appended with the very tiresome “FAIL”. These
are irksome to read, but added together are worth noticing. Often times these
innocent tweets will inform a decision about whether an esoteric bug is worth
adding to the short list. We also created a GitHub account on Twitter that our
support guy uses to respond to negative tweets. Offering this level of customer
service almost always turns a disgruntled customer into a happy one.</p>

<p>If you have an iPhone, I heartily recommend the
<a href="http://fanzter.com/products/download/summizer">Summizer</a> app from Fanzter, Inc.
It makes searching, viewing, and responding to tweets a cinch.</p>

<h2 id="deploy-at-will">Deploy at Will!</h2>

<p>At the first RailsConf I had the pleasure of hearing Martin Fowler deliver an
amazing keynote. He made some apt metaphors regarding agile development that I
will now paraphrase and mangle.</p>

<p>Imagine you’re tasked with building a computer controlled gun that can
accurately hit a target about 50 meters distant. That is the only requirement.
One way to do this is to build a complex machine that measures every possible
variable (wind, elevation, temperature, etc.) before the shot and then takes aim
and shoots. Another approach is to build a simple machine that fires rapidly and
can detect where each shot hits. It then uses this information to adjust the aim
of the next shot, quickly homing in on the target a little at a time.</p>

<p>The difference between these two approaches is to realize that bullets are
cheap. By the time the former group has perfected their wind detection
instrument, you’ll have finished your simple weapon and already hit the target.</p>

<p>In the world of web development, the target is your ideal offering, the bullets
are your site deploys, and your customers provide the feedback mechanism. The
first year of a web offering is a magical one. Your customers are most likely
early adopters and love to see new features roll out every few weeks. If this
results in a little bit of downtime, they’ll easily forgive you, as long as
those features are sweet. In the early days of GitHub, we’d deploy up to ten
times in one afternoon, always inching closer to that target.</p>

<p>Make good use of that first year, because once the big important customers start
rolling in, you have to be a lot more careful about hitting one of them with a
stray bullet. Later in the game, downtime and botched deploys are money lost and
you have to rely more on building instruments to predict where you should aim.</p>

<h2 id="you-dont-need-an-office">You Don’t Need an Office</h2>

<p>All four fulltime GitHub employees work in the San Francisco area, and yet we
have no office. But we’re not totally virtual either. In fact, a couple times a
week you’ll find us at a cafe in North Beach, huddled around a square table that
was made by nailing 2x4s to an ancient fold-out bulletin board. It’s no Google
campus, but the rent is a hell of a lot cheaper and the drinks are just as good!</p>

<p>This is not to say that we haven’t looked at a few places to call home. Hell, we
almost leased an old bar. But in the end there’s no hurry to settle down. We’re
going to wait until we find the perfect office. Until then, we can invest the
savings back into the company, or into our pockets. For now, I like my couch and
the cafe just fine.</p>

<p>Of course, none of this would be possible without 37signals’
<a href="http://www.campfirenow.com/">Campfire</a> web-based chat and the
very-difficult-to-find-but-totally-amazing
<a href="http://productblog.37signals.com/products/2008/10/propane-takes-c.html">Propane</a>
OSX desktop app container that doubles the awesome. Both highly recommended.</p>

<h2 id="hire-through-open-source">Hire Through Open Source</h2>

<p>Beyond the three cofounders of GitHub, we’ve hired one full time developer
(Scott Chacon) and one part time support specialist (Tekkub).</p>

<p>We hired Tekkub because he was one of the earliest GitHub users and actively
maintains more than 75 projects (WoW addons mostly) on GitHub and was very
active in sending us feedback in the early days. He would even help people out
in the IRC channel, simply because he enjoyed doing so.</p>

<p>I met Scott at one of the San Francisco Ruby meetups where he was presenting on
one of his myriad Git-centric projects. Scott had been working with Git long
before anyone else in the room. He was also working on a pure Ruby
implementation of Git at the same time I was working on my fork/exec based Git
bindings. It was clear to me then that depending on how things went down, he
could become either a powerful ally or a dangerous foe. Luckily, we all went
drinking afterwards and we became friends. Not long after, Scott started
consulting for us and wrote the entire backend for what you now know of as
<a href="http://gist.github.com/">Gist</a>. We knew then that we would do whatever it took
to hire Scott full time. There would be no need for an interview or references.
We already knew everything we needed to know in order to make him an offer
without the slightest reservation.</p>

<p>The lesson here is that it’s far easier and less risky to hire based on relevant
past performance than it is to hire based on projected future performance.
There’s a corollary that also comes into play: if you’re looking to work for a
startup (or anyone for that matter), contribute to the community that surrounds
it. Use your time and your code to prove that you’re the best one for the job.</p>

<h2 id="trust-your-team">Trust your Team</h2>

<p>There’s nothing I hate more than micromanagers. When I was doing graphic design
consulting 5 years ago I had a client that was very near the Platonic form of a
micromanager. He insisted that I travel to his office where I would sit in the
back room at an old Mac and design labels and catalogs and touch up photographs
of swimwear models (that part was not so bad!). While I did these tasks he would
hover over me and bark instructions. “Too red! Can you make that text smaller?
Get rid of those blemishes right there!” It drove me absolutely batty.</p>

<p>This client could have just as easily given me the task at the beginning of the
day, gone and run the business, and come back in 6 hours whereupon I would have
created better designs twice as fast as if he were treating me like a robot that
converted his speech into Photoshop manipulations. By treating me this way, he
was marginalizing my design skills and wasting both money and talent.</p>

<p>Micromanagement is symptomatic of a lack of trust. The remedy for this ailment
is to hire experts and then trust their judgment. In a startup, you can
drastically reduce momentum by applying micromanagement, or you can boost
momentum by giving trust. It’s pretty amazing what can happen when a group of
talented people who trust each other get together and decide to make something
awesome.</p>

<h2 id="you-dont-need-venture-capital">You Don’t Need Venture Capital</h2>

<p>A lot has been written recently about how the venture capital world is changing.
I don’t pretend to be an expert on the subject, but I’ve learned enough to say
that a web startup like ours doesn’t need any outside money to succeed. I know
this because we haven’t taken a single dime from investors. We bootstrapped the
company on a few thousand dollars and became profitable the day we opened to the
public and started charging for subscriptions.</p>

<p>In the end, every startup is different, and the only person that can decide if
outside money makes sense is you. There are a million things that could drive
you to seek and accept investment, but you should make sure that doing so is in
your best interest, because it’s quite possible that you don’t <em>need</em> to do so.
One of the reasons I left my last job was so that I could say “the buck stops
here.” If we’d taken money, I would no longer be able to say that.</p>

<h2 id="open-source-whatever-you-can">Open Source Whatever You Can</h2>

<p>In order for GitHub to talk to Git repositories, I created the first ever Ruby
Git bindings. Eventually, this library become quite complete and we were faced
with a choice: Do we open source it or keep it to ourselves? Both approaches
have benefits and drawbacks. Keeping it private means that the hurdle for
competing Ruby-based Git hosting sites would be higher, giving us an advantage.
But open sourcing it would mean that</p>

<p><b>NOTE: This is where the post ended and remained frozen in carbonite until
today. I intend to write a follow up post on our open source philosophy at
GitHub in the near future. I’m sure the suspense is killing you!</b></p>

<p><a href="http://news.ycombinator.com/item?id=2384320">Discuss this post on Hacker News</a></p>]]></content><author><name></name></author><summary type="html"><![CDATA[Ten Lessons from GitHub’s First Year]]></summary></entry></feed>